{"version":3,"sources":["ts/shared/store/reducers/mainReducer.ts","ts/shared/store/reducers/GameReducer/GameReducer.ts","ts/shared/store/reducers/RankingReducer/RankingReducer.ts","ts/shared/hooks/StateProvider.tsx","ts/axios-orders.ts","ts/shared/store/actions/GameActions/GameActions.ts","ts/components/Modal/Modal.tsx","ts/components/Cards/Card/Card.tsx","ts/components/Cards/Cards.tsx","ts/shared/hooks/useMessageHandler.tsx","ts/pages/Game/Game.tsx","ts/shared/store/actions/RankingActions/RankingActions.ts","ts/components/RankItem/RankItem.tsx","ts/App.tsx","reportWebVitals.ts","index.tsx"],"names":["combineReducers","game","state","action","type","isStarted","isPlaying","payload","deck_id","newPlayerCards","player_cards","newDealerCards","dealer_cards","newPlayerCardsValue","player_cards_value","newDealerCardsValue","dealer_cards_value","bet","bank","newBet","newBank","round","newRoundList","round_list","ranking","newResults","bestResults","newRanking","mainReducer","initialState","stateCtx","createContext","dispatchCtx","StateProvider","props","useReducer","dispatch","Provider","value","children","useDispatch","useContext","useGlobalState","property","instance","axios","create","baseURL","shuffleCards","get","then","res","catch","err","setGame","clearRound","setIsPlaying","clearGame","drawCards","number","cardsValue","cards","data","cards_value","map","card","parseInt","useStyles","makeStyles","theme","createStyles","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","SimpleModal","classes","body","className","onClick","changeOpenRanking","Modal","open","onOpenRanking","onClose","aria-labelledby","aria-describedby","src","images","png","alt","Cards","static_card","content","useState","isDrawing","setIsDrawing","useEffect","setTimeout","index","Card","isStand","slice","style","textAlign","color","margin","disabled","onEndRound","onIsStandChange","length","setDoubleBet","resetGame","useMessageHandler","React","message","setMessage","showMessage","newMessage","window","Game","bankAmount","setBankAmount","betAmount","setBetAmount","setIsStand","isEndRound","setIsEndRound","changeBetAndBankValue","onWin","newBankAmount","wonGame","onLost","onDraw","drawGame","deck","shuffleNewDeck","result","localStorage","removeItem","console","log","addResult","onSetLastGame","resetBank","changeBetAndBankAmount","RankItem","rank","App","openRanking","setOpenRanking","lastGame","setLastGame","addEventListener","ev","preventDefault","setItem","JSON","stringify","returnValue","getItem","parse","setRanking","rankContent","rankList","sort","a","b","modaRanking","setContinueGame","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.639548da.chunk.js","sourcesContent":["import combineReducers from \"react-combine-reducers\";\r\nimport { gameReducer, initialGame, Game } from \"./GameReducer/GameReducer\";\r\nimport { rankingReducer, initialRanking, Ranking } from \"./RankingReducer/RankingReducer\";\r\nimport { Action } from \"../actions/Action\";\r\n\r\ntype mainState = {\r\n    game: Game;\r\n    ranking: Ranking;\r\n};\r\n\r\nexport type MainReducer = (\r\n    state: mainState,\r\n    action: Action\r\n) => mainState;\r\nexport type State = typeof initialState;\r\n\r\nexport const [mainReducer, initialState] = combineReducers<MainReducer>(\r\n    {\r\n        game: [gameReducer, initialGame],\r\n        ranking: [rankingReducer, initialRanking]\r\n    }\r\n);\r\n","import { Action } from \"../../actions/Action\";\r\n\r\nexport type Game = {\r\n  deck_id: string;\r\n  player_cards: any[];\r\n  player_cards_value: number;\r\n  dealer_cards: any[];\r\n  dealer_cards_value: number;\r\n  bank: number;\r\n  bet: number;\r\n  isStarted: boolean;\r\n  isPlaying: boolean;\r\n  round: number;\r\n  round_list: any[];\r\n};\r\n\r\nexport const initialGame: Game = {\r\n  deck_id: \"\",\r\n  player_cards: [],\r\n  player_cards_value: 0,\r\n  dealer_cards: [],\r\n  dealer_cards_value: 0,\r\n  bank: 1000,\r\n  bet: 0,\r\n  isStarted: false,\r\n  isPlaying: false,\r\n  round: 0,\r\n  round_list: [],\r\n};\r\n\r\nexport const gameReducer = (state: Game, action: Action) => {\r\n  switch (action.type) {\r\n    case \"SET_GAME\":\r\n      return {\r\n        ...state,\r\n        isStarted: !state.isStarted,\r\n      };\r\n    case \"SET_IS_PLAYING\":\r\n      return {\r\n        ...state,\r\n        isPlaying: action.payload,\r\n      };\r\n    case \"SET_DECK\":\r\n      return {\r\n        ...state,\r\n        deck_id: action.payload,\r\n      };\r\n    case \"SET_PLAYER_CARDS\":\r\n      let newPlayerCards: any[] = [...state.player_cards, ...action.payload];\r\n      return {\r\n        ...state,\r\n        player_cards: newPlayerCards,\r\n      };\r\n    case \"SET_DEALER_CARDS\":\r\n      let newDealerCards: any[] = [...state.dealer_cards, ...action.payload];\r\n      return {\r\n        ...state,\r\n        dealer_cards: newDealerCards,\r\n      };\r\n    case \"CLEAR_PLAYER_CARDS\":\r\n      return {\r\n        ...state,\r\n        player_cards: action.payload,\r\n      };\r\n    case \"CLEAR_DEALER_CARDS\":\r\n      return {\r\n        ...state,\r\n        dealer_cards: action.payload,\r\n      };\r\n    case \"CHANGE_PLAYER_CARDS_VALUE\":\r\n      let newPlayerCardsValue: number =\r\n        state.player_cards_value + action.payload;\r\n      return {\r\n        ...state,\r\n        player_cards_value: newPlayerCardsValue,\r\n      };\r\n    case \"CHANGE_DEALER_CARDS_VALUE\":\r\n      let newDealerCardsValue: number =\r\n        state.dealer_cards_value + action.payload;\r\n      return {\r\n        ...state,\r\n        dealer_cards_value: newDealerCardsValue,\r\n      };\r\n    case \"CLEAR_PLAYER_CARDS_VALUE\":\r\n      return {\r\n        ...state,\r\n        player_cards_value: action.payload,\r\n      };\r\n    case \"CLEAR_DEALER_CARDS_VALUE\":\r\n      return {\r\n        ...state,\r\n        dealer_cards_value: action.payload,\r\n      };\r\n    case \"SET_BET\":\r\n      return {\r\n        ...state,\r\n        bet: action.payload,\r\n      };\r\n    case \"SET_BANK\":\r\n      return {\r\n        ...state,\r\n        bank: action.payload,\r\n      };\r\n    case \"SET_DOUBLE_BET\":\r\n      let newBet: number = state.bet * 2;\r\n      let newBank: number = state.bank - state.bet;\r\n      return {\r\n        ...state,\r\n        bet: newBet,\r\n        bank: newBank\r\n      };\r\n    case \"SET_CONTINUE_GAME\":\r\n      return {\r\n        ...state,\r\n        deck_id: action.payload.deck_id,\r\n        player_cards: action.payload.player_cards,\r\n        player_cards_value: action.payload.player_cards_value,\r\n        dealer_cards: action.payload.dealer_cards,\r\n        dealer_cards_value: action.payload.dealer_cards_value,\r\n        bank: action.payload.bank,\r\n        bet: action.payload.bet,\r\n        isStarted: action.payload.isStarted,\r\n        isPlaying: action.payload.isPlaying,\r\n        round: action.payload.round,\r\n      };\r\n    case \"CHANGE_ROUND\":\r\n      return {\r\n        ...state,\r\n        round: state.round + 1,\r\n      };\r\n    case \"CLEAR_ROUND\":\r\n      return {\r\n        ...state,\r\n        round: 0,\r\n      };\r\n    case \"SET_ROUND_LIST\":\r\n      let newRoundList: any[] = [...state.round_list, action.payload];\r\n      return {\r\n        ...state,\r\n        round_list: newRoundList,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Action } from \"../../actions/Action\";\r\n\r\nexport type Ranking = {\r\n  bestResults: number[];\r\n};\r\n\r\nexport const initialRanking: Ranking = {\r\n  bestResults: [],\r\n};\r\n\r\nexport const rankingReducer = (state: Ranking, action: Action) => {\r\n  switch (action.type) {\r\n    case \"ADD_RESULT\":\r\n      let newResults = [...state.bestResults, action.payload];\r\n      return {\r\n        ...state,\r\n        bestResults: newResults,\r\n      };\r\n      case \"SET_RANKING\":\r\n        let newRanking = [...state.bestResults, ...action.payload];\r\n        return {\r\n          ...state,\r\n          bestResults: newRanking,\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport {  mainReducer, initialState, State, MainReducer } from \"../store/reducers/mainReducer\";\r\nimport { Action } from \"../store/actions/Action\";\r\n\r\nconst stateCtx = createContext(initialState);\r\nconst dispatchCtx = createContext((() => 0) as React.Dispatch<Action>);\r\n\r\nexport const StateProvider = (props: any) => {\r\n  const [state, dispatch] = useReducer<MainReducer>(\r\n    mainReducer,\r\n    initialState\r\n  );\r\n    return (\r\n        <dispatchCtx.Provider value={dispatch}>\r\n        <stateCtx.Provider value={state}>\r\n          {props.children}\r\n        </stateCtx.Provider>\r\n      </dispatchCtx.Provider> \r\n\r\n    );\r\n};\r\nexport const useDispatch = () => {\r\n    return useContext(dispatchCtx);\r\n  };\r\n  \r\n  export const useGlobalState = <K extends keyof State>(property: K) => {\r\n    const state = useContext(stateCtx);\r\n    return state[property]; // only one depth selector for comparison\r\n  };\r\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://deckofcardsapi.com/api/deck/\"\r\n});\r\n\r\nexport default instance;","import axios from \"../../../../axios-orders\";\r\n\r\nexport const shuffleCards = (deck_id: any) => {\r\n  try {\r\n    axios\r\n      .get(`${deck_id}/shuffle/`)\r\n      .then((res: any) => {})\r\n      .catch((err: any) => {});\r\n  } catch (err) {}\r\n};\r\n\r\nexport const shuffleNewDeck = (dispatch: any) => {\r\n  try {\r\n    axios\r\n      .get(\"new/shuffle/?deck_count=6\")\r\n      .then((res: any) => {\r\n        const deck = res.data;\r\n        dispatch({ type: \"SET_DECK\", payload: deck.deck_id });\r\n      })\r\n      .catch((err: any) => {});\r\n  } catch (err) {}\r\n};\r\n\r\nexport const setGame = (dispatch: any) => {\r\n  try {\r\n    dispatch({ type: \"SET_GAME\" });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const clearRound = (dispatch: any) => {\r\n  try {\r\n    dispatch({ type: \"CLEAR_ROUND\" });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const setContinueGame = (dispatch: any, game: any) => {\r\n  try {\r\n    dispatch({ type: \"SET_CONTINUE_GAME\", payload: game });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const setIsPlaying = (dispatch: any, isPlaying: boolean) => {\r\n  try {\r\n    dispatch({ type: \"SET_IS_PLAYING\", payload: isPlaying });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const changeBetAndBankAmount = (\r\n  dispatch: any,\r\n  betAmount: number,\r\n  bankAmount: number\r\n) => {\r\n  try {\r\n    dispatch({ type: \"SET_BET\", payload: betAmount });\r\n    dispatch({ type: \"SET_BANK\", payload: bankAmount });\r\n    dispatch({ type: \"CHANGE_ROUND\" });\r\n  } catch (err) {\r\n    dispatch({ type: \"SET_IS_PLAYING\", payload: false });\r\n  }\r\n};\r\n\r\nexport const setDoubleBet = (dispatch: any) => {\r\n  try {\r\n    dispatch({ type: \"SET_DOUBLE_BET\" });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const wonGame = (\r\n  dispatch: any,\r\n  betAmount: number,\r\n  bankAmount: number\r\n) => {\r\n  let newBankAmount: number = bankAmount + (betAmount + (betAmount * 1.5));\r\n  try {\r\n    clearGame(dispatch);\r\n    dispatch({ type: \"SET_BANK\", payload: newBankAmount });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const drawGame = (\r\n  dispatch: any,\r\n  betAmount: number,\r\n  bankAmount: number\r\n) => {\r\n  let newBankAmount: number = bankAmount + betAmount;\r\n  try {\r\n    clearGame(dispatch);\r\n    dispatch({ type: \"SET_BANK\", payload: newBankAmount });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const clearGame = (dispatch: any) => {\r\n  try {\r\n    dispatch({ type: \"SET_BET\", payload: 0 });\r\n    dispatch({ type: \"CLEAR_PLAYER_CARDS_VALUE\", payload: 0 });\r\n    dispatch({ type: \"CLEAR_DEALER_CARDS_VALUE\", payload: 0 });\r\n    dispatch({ type: \"CLEAR_PLAYER_CARDS\", payload: [] });\r\n    dispatch({ type: \"CLEAR_DEALER_CARDS\", payload: [] });\r\n  } catch (err) {}\r\n};\r\n\r\nexport const drawCards = (\r\n  number: number,\r\n  deck_id: string,\r\n  dispatch: any,\r\n  type: string,\r\n  cardsValue: number\r\n) => {\r\n  try {\r\n    axios\r\n      .get(`${deck_id}/draw/?count=${number}`)\r\n      .then((res: any) => {\r\n        const cards = res.data;\r\n        dispatch({ type: type, payload: cards.cards });\r\n        let cards_value: number = 0;\r\n        cards.cards.map((card: any) => {\r\n          if (card.value === \"ACE\") {\r\n            if(cards_value === 11 || cardsValue > 11){\r\n              cards_value = cards_value + 1;\r\n            }else {\r\n              cards_value = cards_value + 11;\r\n            }\r\n          } else if (\r\n            card.value === \"KING\" ||\r\n            card.value === \"QUEEN\" ||\r\n            card.value === \"JACK\"\r\n          ) {\r\n            cards_value = cards_value + 10;\r\n          } else {\r\n            cards_value = cards_value + parseInt(card.value);\r\n          }\r\n        });\r\n        if (type === \"SET_PLAYER_CARDS\") {\r\n          dispatch({ type: \"CHANGE_PLAYER_CARDS_VALUE\", payload: cards_value });\r\n        } else {\r\n          dispatch({ type: \"CHANGE_DEALER_CARDS_VALUE\", payload: cards_value });\r\n        }\r\n        dispatch({ type: \"SET_IS_PLAYING\", payload: true });\r\n      })\r\n      .catch((err: any) => {\r\n        dispatch({ type: \"SET_IS_PLAYING\", payload: false });\r\n      });\r\n  } catch (err) {\r\n    dispatch({ type: \"SET_IS_PLAYING\", payload: false });\r\n  }\r\n};\r\n\r\nexport const resetGame = (dispatch: any, deck_id: string) => {\r\n  try {\r\n    clearGame(dispatch);\r\n    dispatch({ type: \"SET_BANK\", payload: 1000 });\r\n    clearRound(dispatch);\r\n    dispatch({ type: \"SET_IS_PLAYING\", payload: false });\r\n    shuffleCards(deck_id);\r\n  } catch (err) {}\r\n};\r\n\r\nexport const resetBank = (dispatch: any) => {\r\n  try {\r\n    dispatch({ type: \"SET_BANK\", payload: 1000 });\r\n  } catch (err) {}\r\n};\r\n","import React, { Fragment, FunctionComponent } from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      position: \"absolute\",\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"2px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  })\r\n);\r\n\r\nconst SimpleModal: FunctionComponent<{\r\n  onOpenRanking: any;\r\n  changeOpenRanking: any;\r\n}> = (props) => {\r\n  const classes = useStyles();\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n\r\n  let body: any = (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className={classes.paper}>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div onClick={props.changeOpenRanking}>\r\n      <Modal\r\n        open={props.onOpenRanking}\r\n        onClose={props.changeOpenRanking}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default SimpleModal;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst card = (props: any) => (\r\n  <div>\r\n    <img src={props.card.images.png} className=\"img-fluid\" alt=\"\" />\r\n  </div>\r\n);\r\n\r\nexport default card;\r\n","import React, { Fragment, FunctionComponent, useEffect, useState } from \"react\";\r\nimport Card from \"./Card/Card\";\r\nimport {\r\n  drawCards,\r\n  setDoubleBet,\r\n  resetGame,\r\n} from \"./../../shared/store/actions/GameActions/GameActions\";\r\nimport {\r\n  useGlobalState,\r\n  useDispatch,\r\n} from \"./../../shared/hooks/StateProvider\";\r\nconst Cards: FunctionComponent<{\r\n  onIsStandChange: any;\r\n  isStand: any;\r\n  onEndRound: any;\r\n}> = (props) => {\r\n  const game = useGlobalState(\"game\");\r\n  const dispatch = useDispatch();\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n\r\n  let player_cards;\r\n  let dealer_cards;\r\n  let static_card;\r\n  let content;\r\n\r\n  const onDoubleDown = () => {\r\n    setDoubleBet(dispatch);\r\n    drawCards(1, game.deck_id, dispatch, \"SET_PLAYER_CARDS\", game.player_cards_value);\r\n    props.onIsStandChange();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDrawing) {\r\n      drawCards(1, game.deck_id, dispatch, \"SET_PLAYER_CARDS\", game.player_cards_value);\r\n      setTimeout(() => {\r\n        setIsDrawing(false);\r\n      }, 1000)\r\n    }\r\n  }, [isDrawing]);\r\n\r\n  player_cards = game.player_cards.map((card: any, index) => {\r\n    return <Card key={index} card={card} />;\r\n  });\r\n  if (props.isStand) {\r\n    dealer_cards = game.dealer_cards.map((card: any, index) => {\r\n      return <Card key={index} card={card} />;\r\n    });\r\n  } else {\r\n    let cards;\r\n    cards = game.dealer_cards.slice(1, 2).map((card: any, index) => {\r\n      return <Card key={index} card={card} />;\r\n    });\r\n    static_card = (\r\n      <div>\r\n        <img\r\n          src=\"https://i.ibb.co/0Zt2Y9S/card.png\"\r\n          className=\"img-fluid\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    );\r\n    dealer_cards = (\r\n      <Fragment>\r\n        {static_card}\r\n        {cards}\r\n      </Fragment>\r\n    );\r\n  }\r\n  content = (\r\n    <Fragment>\r\n      <p style={{ textAlign: \"center\", color: \"white\", margin: 0 }}>\r\n        Dealer Cards\r\n      </p>\r\n      {props.isStand ? (\r\n        <p\r\n          className=\"m-1\"\r\n          style={{ textAlign: \"center\", color: \"white\", margin: 0 }}\r\n        >\r\n          Dealer cards value: {game.dealer_cards_value}\r\n        </p>\r\n      ) : null}\r\n      <div className=\"d-flex justify-content-center\">{dealer_cards}</div>\r\n      <p style={{ textAlign: \"center\", color: \"white\", margin: 0 }}>\r\n        Player Cards\r\n      </p>\r\n      <p\r\n        className=\"m-1\"\r\n        style={{ textAlign: \"center\", color: \"white\", margin: 0 }}\r\n      >\r\n        Player cards value: {game.player_cards_value}\r\n      </p>\r\n      <div className=\"d-flex justify-content-center\">{player_cards}</div>\r\n      <div className=\"d-flex justify-content-center\">\r\n        <button\r\n          className=\"btn btn-light mr-2\"\r\n          disabled={\r\n            props.isStand\r\n              ? true\r\n              : props.onEndRound\r\n              ? true\r\n              : isDrawing\r\n              ? true\r\n              : false\r\n          }\r\n          onClick={() => setIsDrawing(true)}\r\n        >\r\n          Hit\r\n        </button>\r\n        <button\r\n          className=\"btn btn-light mr-2\"\r\n          disabled={props.isStand ? true : props.onEndRound ? true : false}\r\n          onClick={() => props.onIsStandChange()}\r\n        >\r\n          Stand\r\n        </button>\r\n        <button\r\n          className=\"btn btn-light mr-2\"\r\n          disabled={\r\n            props.isStand\r\n              ? true\r\n              : props.onEndRound\r\n              ? true\r\n              : game.player_cards.length > 2\r\n              ? true\r\n              : game.bank >= game.bet\r\n              ? false\r\n              : true\r\n          }\r\n          onClick={() => onDoubleDown()}\r\n        >\r\n          Double Down\r\n        </button>\r\n        <button\r\n          className=\"btn btn-light mr-2\"\r\n          disabled={props.isStand ? true : props.onEndRound ? true : false}\r\n          onClick={() => resetGame(dispatch, game.deck_id)}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n  return <Fragment>{content}</Fragment>;\r\n};\r\nexport default Cards;\r\n","import * as React from \"react\";\r\n\r\nconst useMessageHandler = (initialState: string | null) => {\r\n  const [message, setMessage] = React.useState(initialState);\r\n  const showMessage = (newMessage: string | null) => {\r\n    setMessage(newMessage);\r\n    window.setTimeout(() => {\r\n      setMessage(null);\r\n    }, 2000);\r\n  };\r\n  return { message, showMessage };\r\n};\r\n\r\nexport default useMessageHandler;\r\n","import React, {\r\n  Fragment,\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  useGlobalState,\r\n  useDispatch,\r\n} from \"./../../shared/hooks/StateProvider\";\r\nimport {\r\n  shuffleNewDeck,\r\n  drawCards,\r\n  changeBetAndBankAmount,\r\n  clearGame,\r\n  wonGame,\r\n  setIsPlaying,\r\n  setGame,\r\n  clearRound,\r\n  shuffleCards,\r\n  drawGame,\r\n  resetBank,\r\n} from \"./../../shared/store/actions/GameActions/GameActions\";\r\n\r\nimport Modal from \"../../components/Modal/Modal\";\r\nimport { addResult } from \"./../../shared/store/actions/RankingActions/RankingActions\";\r\nimport Cards from \"../../components/Cards/Cards\";\r\nimport useMessageHandler from \"../../shared/hooks/useMessageHandler\";\r\n\r\nconst Game: FunctionComponent<{\r\n  changeOpenRanking: any;\r\n  onSetLastGame: any;\r\n}> = (props) => {\r\n  const game = useGlobalState(\"game\");\r\n  const dispatch = useDispatch();\r\n  const { message, showMessage } = useMessageHandler(null);\r\n  const [bankAmount, setBankAmount] = useState(game.bank);\r\n  const [betAmount, setBetAmount] = useState(game.bet);\r\n  const [isStand, setIsStand] = useState(false);\r\n  const [isEndRound, setIsEndRound] = useState(false);\r\n\r\n  const changeBetAndBankValue = (value: number) => {\r\n    if (bankAmount >= value) {\r\n      setBankAmount(bankAmount - value);\r\n      setBetAmount(betAmount + value);\r\n    }\r\n  };\r\n  const onWin = () => {\r\n    setTimeout(() => {\r\n      setIsEndRound(true);\r\n      showMessage(`You won ${betAmount + betAmount * 1.5}$`);\r\n      setIsStand(false);\r\n    }, 2000);\r\n    setTimeout(() => {\r\n      setIsEndRound(false);\r\n      wonGame(dispatch, betAmount, bankAmount);\r\n      setIsPlaying(dispatch, false);\r\n    }, 4000);\r\n  };\r\n\r\n  const onLost = () => {\r\n    setTimeout(() => {\r\n      setIsEndRound(true);\r\n      showMessage(`You lost ${betAmount}$`);\r\n      setIsStand(false);\r\n    }, 2000);\r\n    setTimeout(() => {\r\n      setIsEndRound(false);\r\n      clearGame(dispatch);\r\n      setIsPlaying(dispatch, false);\r\n    }, 4000);\r\n  };\r\n\r\n  const onDraw = () => {\r\n    setTimeout(() => {\r\n      setIsEndRound(true);\r\n      showMessage(`You draw`);\r\n      setIsStand(false);\r\n    }, 2000);\r\n    setTimeout(() => {\r\n      setIsEndRound(false);\r\n      drawGame(dispatch, betAmount, bankAmount);\r\n      setIsPlaying(dispatch, false);\r\n    }, 4000);\r\n  };\r\n\r\n  const clearBet = () => {\r\n    setBankAmount(bankAmount + betAmount);\r\n    setBetAmount(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (game.deck_id === \"\") {\r\n      shuffleNewDeck(dispatch);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (game.player_cards_value === 21) {\r\n      setIsStand(true);\r\n      if (game.player_cards_value !== game.dealer_cards_value) {\r\n        onWin();\r\n      } else {\r\n        onDraw();\r\n      }\r\n    } else if (game.player_cards_value > 21) {\r\n      setIsStand(true);\r\n      onLost();\r\n    }\r\n  }, [game.player_cards_value]);\r\n\r\n  useEffect(() => {\r\n    if (isStand && game.dealer_cards_value > 21) {\r\n      onWin();\r\n    }\r\n    if (\r\n      isStand &&\r\n      game.player_cards_value < 21 &&\r\n      game.dealer_cards_value <= 21\r\n    ) {\r\n      if (\r\n        game.dealer_cards_value < 17 &&\r\n        game.dealer_cards_value < game.player_cards_value\r\n      ) {\r\n        drawCards(\r\n          1,\r\n          game.deck_id,\r\n          dispatch,\r\n          \"SET_DEALER_CARDS\",\r\n          game.dealer_cards_value\r\n        );\r\n      } else if (game.dealer_cards_value < game.player_cards_value) {\r\n        onWin();\r\n      } else if (game.player_cards_value === game.dealer_cards_value) {\r\n        onDraw();\r\n      } else {\r\n        onLost();\r\n      }\r\n    }\r\n  }, [game.dealer_cards_value, isStand]);\r\n\r\n  useEffect(() => {\r\n    if (!game.isPlaying && game.round === 5) {\r\n      shuffleCards(game.deck_id);\r\n      addResult(dispatch, game.bank);\r\n      setGame(dispatch);\r\n      clearRound(dispatch);\r\n      props.onSetLastGame();\r\n      props.changeOpenRanking();\r\n    }\r\n  }, [game.isPlaying]);\r\n\r\n  useEffect(() => {\r\n    setBankAmount(game.bank);\r\n    setBetAmount(game.bet);\r\n  }, [game.bet, game.bank]);\r\n\r\n  useEffect(() => {\r\n    if (game.bank < 25 && !game.isPlaying && !isStand) {\r\n      setTimeout(() => {\r\n        setIsEndRound(true);\r\n        showMessage(`You Lost`);\r\n      }, 1000);\r\n      setTimeout(() => {\r\n        setIsEndRound(false);\r\n        localStorage.removeItem(\"lastGame\");\r\n        shuffleCards(game.deck_id);\r\n        setGame(dispatch);\r\n        clearRound(dispatch);\r\n        props.onSetLastGame();\r\n        resetBank(dispatch);\r\n      }, 3000);\r\n    }\r\n  }, [game.isPlaying]);\r\n\r\n  useEffect(() => {\r\n    if (game.isPlaying && game.player_cards.length === 0) {\r\n      drawCards(\r\n        2,\r\n        game.deck_id,\r\n        dispatch,\r\n        \"SET_PLAYER_CARDS\",\r\n        game.player_cards_value\r\n      );\r\n      drawCards(\r\n        2,\r\n        game.deck_id,\r\n        dispatch,\r\n        \"SET_DEALER_CARDS\",\r\n        game.dealer_cards_value\r\n      );\r\n      changeBetAndBankAmount(dispatch, betAmount, bankAmount);\r\n    }\r\n  }, [game.isPlaying]);\r\n\r\n  let content;\r\n  if (!game.isPlaying) {\r\n    content = (\r\n      <Fragment>\r\n        <div className=\"d-flex justify-content-center\">\r\n          {bankAmount < 500 ? (\r\n            <button\r\n              className=\"btn btn-light mr-1\"\r\n              disabled={bankAmount < 25 ? true : false}\r\n              onClick={() => changeBetAndBankValue(25)}\r\n            >\r\n              25$\r\n            </button>\r\n          ) : null}\r\n\r\n          <button\r\n            className=\"btn btn-light mr-1\"\r\n            disabled={bankAmount < 50 ? true : false}\r\n            onClick={() => changeBetAndBankValue(50)}\r\n          >\r\n            50$\r\n          </button>\r\n          <button\r\n            className=\"btn btn-light mr-1\"\r\n            disabled={bankAmount < 100 ? true : false}\r\n            onClick={() => changeBetAndBankValue(100)}\r\n          >\r\n            100$\r\n          </button>\r\n          {bankAmount >= 500 ? (\r\n            <button\r\n              className=\"btn btn-light mr-1\"\r\n              disabled={bankAmount < 500 ? true : false}\r\n              onClick={() => changeBetAndBankValue(500)}\r\n            >\r\n              500$\r\n            </button>\r\n          ) : null}\r\n          <button\r\n            className=\"btn btn-light mr-1\"\r\n            disabled={bankAmount === 0 ? true : false}\r\n            onClick={() => changeBetAndBankValue(bankAmount)}\r\n          >\r\n            Bet All\r\n          </button>\r\n          <button className=\"btn btn-light mr-1\" onClick={() => clearBet()}>\r\n            Clear Bet\r\n          </button>\r\n          <button\r\n            className=\"btn btn-light mr-1\"\r\n            disabled={betAmount <= 0 ? true : game.isPlaying ? true : false}\r\n            onClick={() => setIsPlaying(dispatch, true)}\r\n          >\r\n            PLAY\r\n          </button>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n  if (game.isPlaying) {\r\n    if (game.dealer_cards.length && game.player_cards) {\r\n      content = (\r\n        <Cards\r\n          onIsStandChange={() => setIsStand(!isStand)}\r\n          isStand={isStand}\r\n          onEndRound={isEndRound}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"game d-flex justify-content-center align-items-center\">\r\n      <div className=\"container\">\r\n        <div className=\"d-flex justify-content-center\">\r\n          <p className=\"m-1\" style={{ color: \"white\" }}>\r\n            BANK: {bankAmount}$\r\n          </p>\r\n          <p className=\"m-1\" style={{ color: \"white\" }}>\r\n            BET: {game.bet === 0 ? betAmount : game.bet}$\r\n          </p>\r\n          {game.isPlaying ? (\r\n            <p className=\"m-1\" style={{ color: \"white\" }}>\r\n              Round: {game.round}\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n        {content}\r\n        {isEndRound ? (\r\n          <Modal onOpenRanking={true} changeOpenRanking={() => {}}>\r\n            <p style={{ textAlign: \"center\" }}>{message}</p>\r\n          </Modal>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Game;\r\n","import axios from \"../../../../axios-orders\";\r\n\r\nexport const addResult = (dispatch: any, result: number) => {\r\n  try {\r\n    if (result !== 0) {\r\n      dispatch({ type: \"ADD_RESULT\", payload: result });\r\n    }\r\n    localStorage.removeItem(\"lastGame\");\r\n    dispatch({ type: \"SET_BANK\", payload: 1000 });\r\n  } catch (err) {\r\n    console.log(\"tryCatch setGame BLAD \" + err);\r\n  }\r\n};\r\n\r\nexport const setRanking = (dispatch: any, ranking: any) => {\r\n  try {\r\n    dispatch({ type: \"SET_RANKING\", payload: ranking });\r\n  } catch (err) {\r\n    console.log(\"tryCatch setGame BLAD \" + err);\r\n  }\r\n};\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst RankItem = (props: any) => (\r\n  <Fragment>\r\n    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n      Rank {props.index+1}\r\n      <span className=\"badge badge-primary badge-pill\">{props.rank}$</span> \r\n    </li>\r\n  </Fragment>\r\n);\r\n\r\nexport default RankItem;\r\n","import React, {\n  FunctionComponent,\n  Fragment,\n  Suspense,\n  useContext,\n  lazy,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useGlobalState, useDispatch } from \"./shared/hooks/StateProvider\";\nimport {\n  setGame,\n  setContinueGame,\n} from \"./shared/store/actions/GameActions/GameActions\";\nimport { setRanking } from \"./shared/store/actions/RankingActions/RankingActions\";\nimport Game from \"./pages/Game/Game\";\nimport Modal from \"./components/Modal/Modal\";\nimport RankItem from \"./components/RankItem/RankItem\";\nimport axios from \"./axios-orders\";\n\ninterface IGame {\n  bank: number;\n  bet: number;\n  dealer_cards: [];\n  dealer_cards_value: number;\n  deck_id: string;\n  isPlaying: boolean;\n  isStarted: boolean;\n  player_cards: [];\n  player_cards_value: number;\n  round: number;\n}\n\nconst App: FunctionComponent<{}> = (props) => {\n  const game = useGlobalState(\"game\");\n  const ranking = useGlobalState(\"ranking\");\n  const dispatch = useDispatch();\n  const [openRanking, setOpenRanking] = useState(false);\n  const [lastGame, setLastGame] = useState<IGame>({\n    bank: 0,\n    bet: 0,\n    dealer_cards: [],\n    dealer_cards_value: 0,\n    deck_id: \"\",\n    isPlaying: false,\n    isStarted: false,\n    player_cards: [],\n    player_cards_value: 0,\n    round: 0,\n  });\n  window.addEventListener(\"beforeunload\", (ev) => {\n    ev.preventDefault();\n    localStorage.setItem(\"lastGame\", JSON.stringify(game));\n    localStorage.setItem(\"ranking\", JSON.stringify(ranking.bestResults));\n\n    return (ev.returnValue = \"ASDASDAD\");\n  });\n  useEffect(() => {\n    let lastGame: any = localStorage.getItem(\"lastGame\");\n    setLastGame(JSON.parse(lastGame));\n  }, []);\n\n  useEffect(() => {\n    let newRanking: any = localStorage.getItem(\"ranking\");\n    setRanking(dispatch, JSON.parse(newRanking));\n    // setRanking(dispatch, []);\n    // localStorage.removeItem(\"ranking\");\n  }, []);\n  let rankList: any = ranking.bestResults.sort((a, b) => {\n    return b - a;\n  });\n  let rankContent: any;\n  if (rankList.length===0) {\n    rankContent = <p style={{ textAlign: \"center\", margin: 0 }}>No results</p>;\n  } else {\n    rankContent = rankList.slice(0, 10).map((rank: any, index: any) => {\n      return <RankItem key={index} rank={rank} index={index} />;\n    });\n  }\n  let modaRanking: any = (\n    <Modal\n      onOpenRanking={openRanking}\n      changeOpenRanking={() => setOpenRanking(!openRanking)}\n    >\n      <Fragment>\n        <div className=\"d-flex justify-content-center\">\n          <h1 style={{ textAlign: \"center\" }}>TOP HISTORIC RESULTS</h1>\n        </div>\n        <ul className=\"list-group\">{rankContent}</ul>\n      </Fragment>\n    </Modal>\n  );\n\n  return (\n    <Fragment>\n      {game.isStarted ? (\n        <Game\n          onSetLastGame={() =>\n            setLastGame({\n              ...lastGame,\n              bank: 0,\n              bet: 0,\n              dealer_cards: [],\n              dealer_cards_value: 0,\n              deck_id: \"\",\n              isPlaying: false,\n              isStarted: false,\n              player_cards: [],\n              player_cards_value: 0,\n              round: 0,\n            })\n          }\n          changeOpenRanking={() => setOpenRanking(!openRanking)}\n        ></Game>\n      ) : (\n        <div className=\"mainPage container-fluid d-flex justify-content-center align-items-center\">\n          {modaRanking}\n          <button\n            className=\"btn btn-light mt-6 mr-2\"\n            onClick={() => setGame(dispatch)}\n          >\n            New Game\n          </button>\n          <button\n            className=\"btn btn-light mt-6 mr-2 ml-2\"\n            onClick={() => setOpenRanking(!openRanking)}\n          >\n            Ranking\n          </button>\n          {lastGame.round !== 0 ? (\n            <button\n              className=\"btn btn-light mt-6 ml-2\"\n              onClick={() => setContinueGame(dispatch, lastGame)}\n            >\n              Continue\n            </button>\n          ) : null}\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from \"react\";\n\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"./ts/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { StateProvider } from \"./ts/shared/hooks/StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}